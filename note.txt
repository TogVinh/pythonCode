>> printf

    || printf( object, sep = seperator, end ) ||

- object :  các đối tượng trong python
- sep : phân cách giữa các đôi tượng khi in, nếu không có tham số này thì mặc định là dấu cách
- end : chỉ ra kí tự được in ở cuối của dòng, nếu không có tham số này thì mặc định sẽ là dấu xuống dòng

>> Python syntax và chú thích
- không cần dấu chấm phẩy
- python sử dụng thụt lề để chỉ ra một khối lệnh mới
- chú thích 
    || # ||
- chú thích nhiều dòng 
    """
    this is 
    comment
    block
    """

>> Biến và kiểu dữ liệu
- vùng chứa
- dynamic typing
- để biết kiểu dữ liệu có thể dùng hàm type()

- tiền tố
    + 0b : nhị phân
    + 0o : hệ octa
    + 0x : hệ thập lục

- giá trị lớn nhất có thể lưu của số thực là 1.8 * 10^308, giá trị lớn lớn số này là infinity

- ép kiểu : 
    + int() : ép thành int
    + float() : ép thành float

* kiểu chuỗi trong Python

    - là kiểu dữ liệu được đặt trong ngoặc đơn hoặc ngoặc kép
    - chuỗi nhiều dòng
    - một số ký hiệu đặc biệt trong chuỗi
        + alert : \a 
        + backspace \b
        + Newline \n 
        + tab \t 
        + \' \" \\
    - toán tử in :
        + kiểm tra một chuỗi có nằm bên trong một chuỗi khác hay không
        + nhận về giá trị true hoặc false
    - truyền giá trị
        a  = ' My name is %s, %s year old ' %('arg 1',' arg 2')
    - chuỗi f string
        k = Kteam
        result = f'{k} - test f sting'
        print(result) => Kteam - test f string

    - phương thức cho chuỗi
        + name.capitalize : viết hoa chữ cái đầu
        + name.upper
        + name.lower
        + name.swapcase : chữ viết thường về chuỗi viết hoa, chuỗi viết hoa thành chuỗi viết thường
        + name.title : viết hoa các ký tự đầu tiên của chữ cái
        + name.center(width, fillchange)
    - phương thức xử lý cho chuỗi
        + encode : mã hóa theo chuẩn
        + join
        + replace
        + strip : loại bỏ ký tự đầu đầu và cuối
        + split() : tạo thành kiểu list
        + partition() : tạo thành kiểu dữ liệu tupple
        + find() : trả về vị trí tìm thấy
        + index() : sẽ tạo ra lõi nếu k tìm thấy

* Kiểu list
    - giống cấp phát động
    - giới hạn bởi cặp ngoặc vuông, các phần tử của list được cách nhau bởi dấu phẩy
    - có khả năng chứa mọi giá trị và chính nó
    
    a = list(iterable)
    // iterable là một dạng cấu trúc tập hợp

    - không thể nhân hai list cho nhau, chỉ có thể nhân list với 1 số nhằm nhân chính nó lên nhiều lần
    - in : kiểm tra mọt phần tử có hay không
    - list_Name[index] : lấy ra phần tử có thứ tự index trong list ( tính từ 0)
    - list() : list contructor
    - nameList.count(value) : đếm coi value xuất hiện bao nhiêu lần trong list
    - nameList.index(value) : xem coi value nằm ở vị tri nào
    - nameList.count(value) : đếm số lần xuất hiện của value trong list
    - nameList.index(value) : trả về vị trí của value trong list
    - nameList.copy() : tạo ra một bản sao của list ban đầu
    - name.append() : thêm vào phần tử
    - name.extend() : lấy từng phần tử cho vào list
    - name.insert(index, value) : thêm phần tử value vào vị trí index 
    - name.pop(index) : bỏ đi phần tử thứ index trong list, nếu không truyền vào giá trị index thì mặc định xóa đi phần tử cuối
    - name.remove(value) : xóa giá trị value trong list
    - name.reverse() : tạo ra một list đảo ngược lại
    - name.sort() : sẽ sắp xếp lại list với mặc định là từ nhỏ tới lớn

* Kiểu Tuple 
    - Gần giống với list, bản chất cũng là một container
    - được giới hạn bởi cặp ngoặc ()
    - các phần tử của tuple được phân cách bởi dấu ,
    - có khả năng chứa mọi giá trị
    - tốc độ truy xuất của tuple nhanh hơn list
    - dung lượng chiếm bộ nhớ nhỏ hơn list
    - bảo vệ dữ liệu của bạn sẽ không bị thay đổi, có thể dùng làm key của dictionary
    - theo lý thuyết thì không thể thay đổi giá trị của tuple bằng cách gắn cho index của nó bằng một giá trị khác

    - in : check index có tron tuple hay không 
    - nameTuple[index] : phần tử thứ index của tuple

* sự khác nhau của Hashable & unhashable object
    - các giá trị cũng là một đối tượng
    - hàm id() : trả về giá trị int hoặc long int, là một hằng số tùy theo giá trị truyền vào và sẽ không thay đổi suốt chương trình (hàm id sẽ trả về địa trỉ trong bộ nhớ)
    - Hashable : là kiểu không thể thay đổi giá trị
        -> sẽ sinh ra đủ ra trị của ô nhớ, nên khi muốn thay đổi, cần đưa ra nơi có bộ nhớ mới
    - unhashable : có thể thay đổi giá trị 
        -> bộ nhớ sẽ luôn chừa ra khoảng trống để dự trữ nếu cần thêm giá trị mới

* Kiểu dữ liệu Set
    - được giới hạn bởi cặp ngoặc {}, tất cả những gì nằm trong đó là những phần tử của Set
    - Các phần tử của Set được phân tách bằng dấu ,
    - Set không chứ nhiều hơn 1 phần tử trùng lặp
    - Set chỉ có thể chứ các Hashable object nhưng chính nó lại không phải là một Hashable object, do đó không thể chứa set lồng set, và không thể chứa được list 
    - không thể tạo một empty set với dấu ngoặc nhọn
    - set sẽ không quan tâm đến vị trí của các phần tử

    - toán tử
        + toán tử in
        + set.clear
        + set.pop() : xóa đầu tiên
        + set.remove(value) : xóa phần tử có giá trị value
        + set.discard(value) : 
        + set.copy()

>> toán tử
* toán tử gán
    a = b
    a, b, c = 100, 200, 300

* toán tử toán học
    + - * /
    // chia nguyên
    % chia dư
    ** lũy thừa

* toán tử so sánh
    ==  >  >=  < <= !=

* toán tử logic
    and 
    or
    not

* toán tử nhận dạng
    dùng is
    ex 
        a = [1 , 2 , 3]
        b = [1, 2, 3]
        printf(a is b) = false
        printf ( a == b) = true

* toán tử thành viên
    - toán tử in

* toán tử bit

    